import asyncio
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler
)
from config import logger, get_config
import db
from db import init_db

SOURCE, DESTINATION = range(2)

MSG_HELP_ID_SOURCE = """
<b>–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b> –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–æ—Ç–∫—É–¥–∞ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è) –∏–ª–∏ <b>–≤–≤–µ–¥–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∞</b> (–ø—Ä–∏–º–µ—Ä: -1002719997220).\n
–í–∑—è—Ç—å ID –≥—Ä—É–ø–ø—ã –º–æ–∂–Ω–æ –≤ –≤–µ—Ä—Å–∏–∏ Telegram Web –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ https://web.telegram.org/k/#-2844913382, —Ç–æ –ø–æ—Å–ª–µ –∑–Ω–∞–∫–∞ '-' –¥–æ–±–∞–≤–ª—è–µ–º 100, –ø–æ–ª—É—á–∏—Ç—Å—è: -1002844913382.
"""
MSG_HELP_ID_DESTINATION = """
<b>–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b> –∏–∑ –∫–∞–Ω–∞–ª–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–∫—É–¥–∞ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è) –∏–ª–∏ <b>–≤–≤–µ–¥–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è</b> (–ø—Ä–∏–º–µ—Ä: -1002719997220).\n
–í–∑—è—Ç—å ID –≥—Ä—É–ø–ø—ã –º–æ–∂–Ω–æ –≤ –≤–µ—Ä—Å–∏–∏ Telegram Web –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ https://web.telegram.org/k/#-2844913382, —Ç–æ –ø–æ—Å–ª–µ –∑–Ω–∞–∫–∞ '-' –¥–æ–±–∞–≤–ª—è–µ–º 100, –ø–æ–ª—É—á–∏—Ç—Å—è: -1002844913382.
"""

whitelist_ids = get_config()['whitelist_ids']

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id not in whitelist_ids:
        await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç {update.effective_user.first_name}!\n\n'
        f'–¢–≤–æ–π ID - {update.effective_user.id}. –ß—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç ID –≤ –≤–∞–π—Ç–ª–∏—Å—Ç. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.')
        return
    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç {update.effective_user.first_name}!\n\n'
        f'–ß—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º –≤ –≥—Ä—É–ø–ø–µ/–∫–∞–Ω–∞–ª–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ –≤ –≥—Ä—É–ø–ø–µ/–∫–∞–Ω–∞–ª–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.\n\n'
        f'–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n'
        f'/start - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n'
        f'/add - –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π\n'
        f'/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n'
        f'/remove - —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'
        f'/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ'
    )


async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.effective_user.id not in whitelist_ids:
        return ConversationHandler.END

    await update.message.reply_text(
        MSG_HELP_ID_SOURCE,
        parse_mode='HTML',
        disable_web_page_preview=True
    )
    return SOURCE


async def source_step(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.forward_from_chat:
        context.user_data['source_id'] = str(update.message.forward_from_chat.id)
        await update.message.reply_text(MSG_HELP_ID_DESTINATION,
        parse_mode='HTML',
        disable_web_page_preview=True)
        return DESTINATION

    if update.message.text and update.message.text.startswith("-100"):
        context.user_data['source_id'] = update.message.text.strip()
        await update.message.reply_text(MSG_HELP_ID_DESTINATION,
        parse_mode='HTML',
        disable_web_page_preview=True)
        return DESTINATION

    await update.message.reply_text(
        "–≠—Ç–æ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ –∏ –Ω–µ ID –≥—Ä—É–ø–ø—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –≤–∏–¥–∞ -100XXXXXXXXX."
    )
    return SOURCE



async def destination_step(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.forward_from_chat:
        destination_id = str(update.message.forward_from_chat.id)
    elif update.message.text and update.message.text.startswith("-100"):
        destination_id = update.message.text.strip()
    else:
        await update.message.reply_text(
            "–≠—Ç–æ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ –∏ –Ω–µ ID –≥—Ä—É–ø–ø—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –≤–∏–¥–∞ -100XXXXXXXXX."
        )
        return DESTINATION

    source_id = context.user_data['source_id']
    user_id = str(update.effective_user.id)

    try:
        await db.add_subscription(source_id, destination_id, user_id)
        await update.message.reply_text(
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
            f"–ò—Å—Ç–æ—á–Ω–∏–∫: {source_id}\n"
            f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {destination_id}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    context.user_data.clear()
    return ConversationHandler.END



async def list_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id not in whitelist_ids:
        return

    user_id = str(update.effective_user.id)
    try:
        subscriptions = await db.get_subscriptions(user_id=user_id)
        if not subscriptions:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
            return

        response = "üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
        for sub in subscriptions:
            response += (
                f"ID: {sub['id']}\n"
                f"–ò—Å—Ç–æ—á–Ω–∏–∫: {sub['source_id']}\n"
                f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {sub['destination_id']}\n"
                f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {sub['created_date']}\n\n"
            )
        await update.message.reply_text(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫.")


async def remove_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id not in whitelist_ids:
        return

    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n–ü—Ä–∏–º–µ—Ä: /remove 5")
        return

    try:
        sub_id = int(context.args[0])
        user_id = str(update.effective_user.id)

        deleted = await db.delete_subscription_by_user(sub_id, user_id)

        if deleted:
            await update.message.reply_text(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ {sub_id} —É–¥–∞–ª–µ–Ω–∞.")
        else:
            await update.message.reply_text(
                f"‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ {sub_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º."
            )
    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /remove <ID>")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.")


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    context.user_data.clear()
    return ConversationHandler.END


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = update.effective_message
    source = update.effective_chat

    logger.info(f"Received message from chat: {source.id} (type: {source.type})")

    chat_id = str(message.chat.id)
    if not chat_id.startswith('-100'):
        chat_id = f'-100{chat_id[1:]}'
    thread_id = message.message_thread_id
    if thread_id:
        chat_id = f'{chat_id}#{thread_id}'

    try:
        subscriptions = await db.get_subscriptions_by_source(chat_id)

        if not subscriptions:
            return

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {chat_id}: {message}")

        for subscription in subscriptions:
            dest = subscription["destination_id"]
            if '#' in dest:
                dest_chat_id, dest_thread_id = dest.split('#', 1)
                dest_thread_id = int(dest_thread_id)
            else:
                dest_chat_id = dest
                dest_thread_id = None
            try:
                await message.forward(
                    chat_id=dest_chat_id,
                    message_thread_id=dest_thread_id
                )
                logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ {subscription['destination_id']} (topic {dest_thread_id})")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –≤ {subscription['destination_id']} (topic {dest_thread_id}): {e}")
                try:
                    await context.bot.copy_message(
                        chat_id=subscription["destination_id"],
                        from_chat_id=message.chat_id,
                        message_id=message.message_id,
                        message_thread_id=message.message_thread_id
                    )
                    logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ {subscription['destination_id']}")
                except Exception as copy_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ {subscription['destination_id']}: {copy_error}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("Bot starting initialization...")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = ApplicationBuilder().token(get_config()['bot_token']).build()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    setup_handlers(app)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    app.run_polling(
        drop_pending_updates=True,
        allowed_updates=["message", "channel_post", "edited_message"]
    )


def setup_handlers(app):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('add', add_command)],
        states={
            SOURCE: [
                MessageHandler(
                    filters.FORWARDED | filters.TEXT,
                    source_step
                )
            ],
            DESTINATION: [
                MessageHandler(
                    filters.FORWARDED | filters.TEXT,
                    destination_step
                )
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("list", list_command))
    app.add_handler(CommandHandler("remove", remove_command))
    app.add_handler(conv_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    handle_message_filter = (
            filters.ChatType.CHANNEL | filters.ChatType.GROUP | filters.ChatType.SUPERGROUP
            & ~filters.COMMAND
            & ~filters.StatusUpdate.ALL
    )
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(handle_message_filter, handle_message), group=1)

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.ALL, log_message), group=2)


async def log_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.text:
        logger.info(f"Received message: {update.message.text} from {update.effective_chat.id}")


if __name__ == '__main__':
    main()
